pico-8 cartridge // http://www.pico-8.com
version 29
__lua__
--main

isdebug=true

function _init()

 slots = {
		s1 = slot:new(38,1),
		s2 = slot:new(56,1),
		s3 = slot:new(74,1)
	}
	
 game:init()
 bg:init()
 lever:init()
 money:init()
 
 debug:init()
end

function _update()

	game:update()
	
 lever:update()
 
 for k,v in pairs(slots) do
  v:update()
 end
 
 money:update()
 
 debug:update()
end


function _draw()
 cls()
  
 for k,v in pairs(slots) do
  v:draw()
 end
 
 bg:draw()
 lever:draw()
 money:draw()
 game:draw()
 
 debug:draw()
end
-->8
--slot

ystart = -112
yend = 112-1

sw=30
sh=30

symbolnum=7
inertia=true

slot = {}
slot.__index = slot
function slot:new(_x, _spridx)
 local self =  {}

 self.x = _x
 self.y = ystart
 
 self.x2 = _x
 self.y2 = ystart+16*symbolnum

 self.ddy = 0.3
	self.dy = 0
	self.maxdy = 10
 self.spridx = _spridx 
 self.isrolling = false
 
 -- iswaitingforresult
 self.iswaiting = false
 
 self.gotresult=false
 self.result={}
 setmetatable(self, slot)
 return self
end

function slot:start()
 self.isrolling = true
 self.gotresult=false
 self.result={}
end

function slot:stop()
 self.isrolling = false
 self.iswaiting = true
 
 y1dsc=flrex(self.y,16)
end

function slot:update()

	if self.isrolling == false then

  if inertia then
	  self.dy -= self.ddy
		 if self.dy < 0 then
		  self.dy = 0
		 end
  else
   self.dy = 0 
  end
	 
	else

  if inertia then
		 self.dy += self.ddy
		 if self.dy > self.maxdy then
		  self.dy = self.maxdy
		 end  
  else
   self.dy = self.maxdy
  end
	
	end

 self.y = self.y + self.dy
 self.y2 = self.y2 + self.dy

	if not self.isrolling and
	       self.iswaiting then
	 -- align slot
  if self.y~=y1dsc then
	  self.y = flr(self.y + 1)
	  self.y2 = flr(self.y2 + 1)
	 else
 	 printh('result: '..self.y)
	  self.iswaiting=false
	  self:getresult()
	 end
	 
	end
	
 if	self.y > yend then
	 self.y = ystart
 end
 
 if	self.y2 > yend then
	 self.y2 = ystart
 end
 
 -- interpolation
 if	self.y > self.y2 then
  self.y2 = self.y - 112
 else
  self.y2 = self.y + 112
 end
 
end

function slot:draw()

	for i=0,6 do
	 spr(self.spridx+i*2,
	     self.x,self.y+16*i,
	     2,2)

	 spr(self.spridx+i*2,
	     self.x2,self.y2+16*i,
	     2,2)
	end

-- circ(checkx,checky[1],4,7)
end

checky={}
function slot:getresult()
 printh('getresult')
 
 if self.gotresult then
  return
 end

 self.gotresult=true
 
 checkx=self.x
 for i=0,4 do
  checky[i+1]=(20+i*16)
 
  self.result[i+1]=
   pget(checkx,checky[i+1])
 end
 
-- r1=pget(checkx,checky[1])
-- r2=pget(checkx,checky[2])
-- r3=pget(checkx,checky[3])
-- r4=pget(checkx,checky[4])
-- r5=pget(checkx,checky[5])

 printh('result line '..self.x)

 for k,v in pairs(self.result) do
  printh('k:'..k..' v:'..v)
 end
 
 if phase=='end' and
    slots.s1.gotresult and
    slots.s2.gotresult and
    slots.s3.gotresult then
  game.getresult()
 end
 
 
-- printh('r1: '..tostring(r1))
-- printh('r2: '..tostring(r2))
-- printh('r3: '..tostring(r3))
-- printh('r4: '..tostring(r4))
-- printh('r5: '..tostring(r5))

 
-- get flag
-- checkx=(self.x+6)/8
-- 
-- 
-- for i=0,4 do
--  checky[i+1]=(20+i*16)/8
-- end
--
-- m1=mget(checkx, checky[1])
-- printh('x: '..checkx..
--        ', y: '..checky[1])
--
--        
-- m2=mget(checkx, checky[2])
-- printh('x: '..checkx..
--        ', y: '..checky[2])
--        
-- m3=mget(checkx, checky[3])
-- printh('x: '..checkx..
--        ', y: '..checky[3])
--        
-- m4=mget(checkx, checky[4])
-- printh('x: '..checkx..
--        ', y: '..checky[4])
--        
-- m5=mget(checkx, checky[5])
-- printh('x: '..checkx.. 
--        ', y: '..checky[5])
-- 
-- r1=fget(m1)
-- printh('r1: '..tostring(r1))
-- r1=fget(m1,1)
-- printh('r1 1: '..tostring(r1))
-- r1=fget(m1,2)
-- printh('r1 2: '..tostring(r1))
-- r1=fget(m1,4)
-- printh('r1 4: '..tostring(r1))
-- r1=fget(m1,8)
-- printh('r1 8: '..tostring(r1))
-- r1=fget(m1,16)
-- printh('r1 16: '..tostring(r1))
-- r1=fget(m1,32)
-- printh('r1 32: '..tostring(r1))
-- r1=fget(m1,64)
-- printh('r1 64: '..tostring(r1))
--
--
-- r2=fget(m2)
-- r3=fget(m3)
-- r4=fget(m4)
-- r5=fget(m5)
-- 
-- printh('r1: '..tostring(r1))
-- printh('r2: '..tostring(r2))
-- printh('r3: '..tostring(r3))
-- printh('r4: '..tostring(r4))
-- printh('r5: '..tostring(r5))
 
end
-->8
--game

game = {}
started = false
phase = 'end'
pressed = false
bet=0
win=false
showresult=false
function game:init()
 
end

function game:update()

-- printh('game update phase: '..game.phase..' '..time())

 if not btn(4) then
  pressed = false
--  printh('not btn4')
 end

 if btn(4) then
--  printh('btn4 1')  
  if pressed == true then
   return
  end
  
--  printh('btn4 2')
  pressed = true
  
  if not started then
   printh('game start')
   win=false
   showresult=false
	  started = true
	  
	  bet=money:getbet()
	  money.value-=bet
	  
	  phase = '1'
	  for k,v in pairs(slots) do
				v:start()
	  end

  elseif phase == '1' then
   printh('game 1')
	  slots.s1:stop()
	  phase = '2'
	 elseif phase == '2' then
   printh('game 2')
	  slots.s2:stop()
	  phase = '3'
	 
	 elseif phase == '3' then
   printh('game 3')
	  slots.s3:stop()
	  phase = 'end'
	  started = false
	 end	 
	 
 end 

end

function game:draw()
 if showresult then
  if win then
  spr(70,30,0,8,4)
	 else
	  spr(128,30,0,8,4)
	 end 
 end
end

function game:getresult()
 r1=-1
 r2=-1
 r3=-1
-- for k,v in pairs(slots) do
--  --compare at result[3]
--  --todo:compare diagonnaly
--  if 
-- end

 r1=slots.s1.result[3]
 r2=slots.s2.result[3]
 r3=slots.s3.result[3]
 
 if r1==r2 and r2==r3 then
  --win!
  win=true
  
  money.value+=bet
  bet=0
 end
 
 showresult=true
end
-->8
--test

test={}
test.posx=0
test.posy=0
test.offsetx=20

function test:update()

end

function test:draw()
--sx, sy = (sp % 16) * 8, (sp \ 16) * 8


-- draw the 8 x 8 image from (8, 0) at screen location (60, 60)
--sspr(8, 0, 8, 8, 60, 60)

-- draw the same image but stretched to 12 x 20 at screen location (44, 48)
--sspr(8, 0, 8, 8, 44, 48, 12, 20)

-- draw it again, flipped horizontally, at (72, 48)
--sspr(8, 0, 8, 8, 72, 48, 12, 20, true, false)
 cls(1)

	for i=1,3 do
		sspr(-8+16*i, 0, 16, 16,
	      test.posx+test.offsetx,
	      test.posy+-30+30*i,
	      30, 30)
	end

	for i=1,3 do
		sspr(-8+16*i, 0, 16, 16,
	      test.posx+test.offsetx+30,
	      test.posy+-30+30*i,
	      30, 30)
	end

	for i=1,3 do
		sspr(-8+16*i, 0, 16, 16,
	      test.posx+test.offsetx+60,
	      test.posy+-30+30*i,
	      30, 30)
	end

end
-->8
--bg

bg={}
function bg:init()

end

function bg:update()

end

function bg:draw()
 map()
end
-->8
--debug

debug={}
function debug:init()
 if not isdebug then
  return
 end
 printh("----------")
 printh("debug:init")
 printh("----------")
-- testmod()
end

function debug:update()
 if not isdebug then
  return
 end

-- adjustslot()
-- checkflag()

end

function checkflag()
 local x=44
 local y=20
 
 local f=fget(mget(x/8,y/8),1)
 printh('f: '..tostring(f))
end

function adjustslot()
 if btnp(0) then
  slots.s1.y -= 1
 end
 
 if btnp(1) then
  slots.s1.y += 1 
 end

 if btnp(2) then
  slots.s2.y -= 1
 end
 
 if btnp(3) then
  slots.s2.y += 1 
 end
end

function debug:draw()
 if not isdebug then
  return
 end

-- testslot()
-- testslotpos()
-- drawgrid()  
end

function testslotpos()
	x1=44
	y1=20
 cursor(x1, y1)
 print('0',x1,y1,0)

	x1=44
	y1=36		
 cursor(x1, y1)
 print('1',x1,y1,0)

	x1=44
	y1=52		
 cursor(x1, y1)
 print('2',x1,y1,0)  

	x1=44
	y1=68		
 cursor(x1, y1)
 print('3',x1,y1,0)

	x1=44
	y1=84		
 cursor(x1, y1)
 print('4',x1,y1,0)
end

function testslot()
 s1y=slots.s1.y
 s1y2=slots.s1.y2
 
 d1=s1y2-s1y
 
 s2y=slots.s2.y
 s2y2=slots.s2.y2

 d2=s2y2-s2y
 
 s3y=slots.s3.y
 s3y2=slots.s3.y2

 d3=s3y2-s3y

	print("s1y : "..s1y, 0, 0)
	print("s1y2: "..s1y2, 0, 10)
	
	print("d1: "..d1, 0, 20)
	
	print("s2y : "..s2y, 0, 30)
	print("s2y2: "..s2y2, 0, 40)

	print("d2: "..d2, 0, 50)
	
	print("s3y : "..s3y, 0, 60)
	print("s3y2: "..s3y2, 0, 70)

	print("d3: "..d3, 0, 80)

 print("flr s1y: "..flr(s1y), 
 0, 90, 0)
 
 mod=flr(s1y) % 16
 print("mod: "..mod,
 0,95,0)
 
 is16= (mod~=0)
 print(is16,
 0,100,0)
end

function testmod()
	for i=0,128,0.1 do
	 mod = flr(i%16)
--	 mod = i%16
	 is16=mod==0

  if is16 then
	 result=i.." is "..tostring(is16)
	 printh(result)
  end

	end

end

function drawgrid()
 for i=1,16 do
   line(i*8,0,i*8,128,0)
   line(0,i*8,128,i*8,0)
 end
end
-->8
--lever

lever={}

function lever:init()
 lever.y=15
 lever.top=15
 lever.bottom=80
end

function lever:update()
 if btn(4) and 
    phase=='1' then
  lever.y = lever.bottom
 else
  lever.y = lever.top
 end
end

function lever:draw()
 rectfill
  (112+6, lever.bottom+8,
   112+9, lever.y+8, 6)
 rectfill
  (112, lever.bottom,
   112+5, lever.bottom+16,10)
 spr(67,112,lever.y,2,2)
end
-->8
-- converts anything to string, even nested tables
function tostring(any)
    if type(any)=="function" then 
        return "function" 
    end
    if any==nil then 
        return "nil" 
    end
    if type(any)=="string" then
        return any
    end
    if type(any)=="boolean" then
        if any then return "true" end
        return "false"
    end
    if type(any)=="table" then
        local str = "{ "
        for k,v in pairs(any) do
            str=str..tostring(k).."->"..tostring(v).." "
        end
        return str.."}"
    end
    if type(any)=="number" then
        return ""..any
    end
    return "unkown" -- should never show
end
-->8
--utility

-- flr with num
function flrex(num,div)
	local q = num / div
	q = flr(q)
	printh("q: "..q)
	printh("div*q: "..div*q)
	return div*q
end
-->8
--money

money={}
function money:init()
 money.value=100
 money.mul=1
 money.maxmul=10
 --current game
 money.bet=5
end

function money:update()
 if phase~='end' then
  return
 end

 -- up and down
 if btnp(2) then
  money.mul=money.mul+1
  if self.mul>self.maxmul then
   money.mul=money.maxmul
  end
 end
 
 if btnp(3) then
  money.mul=money.mul-1
		if money.mul<1 then
		 money.mul=1
		end
 end
 
end

function money:draw()
 print("money: "..money.value, 40, 100)
 print("bet: "..money.bet*money.mul, 40, 110)
end

function money:getbet()
 return money.bet*money.mul
end
-->8
--cursor
cur={}
function cur:init()
 cur.x=44
 cur.y=20
end

function cur:update()
 if btn(0) then cur.x-=1 end
 if btn(1) then cur.x+=1 end
 if btn(2) then cur.y-=1 end
 if btn(3) then cur.y+=1 end
end

function cur:draw()

end
__gfx__
00000000077777777777777711111111111111112777777777777777377777777777777747777777777777775777777777777777677777777777777700000000
000000000777777777777777111111111111111127777777777777773777777777777777477777aaaaaaa7775777777bb7777777677777777777777700000000
007007000778888888888777177777777777777127777779997777773777777777777777477777777aa7777757772277bbb77777677777bbbbbb777700000000
0007700007888888888888771111111111111111277777999997777737777777b777777747777777aaaa7777577272277bbb777767777000003bb77700000000
000770000788887777888877177771777717771127777799999777773777777bbb777777477777aaaaaaa77757722027b77bb7776777bbbbb3883b7700000000
00700700077888777788887717117171171711712777777999777777377777b7b7b7777747777aaa7aa7aa7757772272227777776770b00038888bb700000000
0000000007788877788887771711717117171171277779999999777737777b77b77b77774777aaaa7aa7aa77577222222227227767000000380888b700000000
000000000778887778887777177711711717771127779999999997773777b777b777b777477aaaa77aaa7aa7572222202202227767bbbbb3888880b700000000
00000000077777778888777717117177771711712777999999999777377b7777b7777b77477aaaa7aaaa7aa7572270220222020767bbbb03888888b700000000
0000000007777777888777771711717117171171277999999999797737888777b777888747aaa77aaaaa7aa7577202272270220767000003880888b700000000
0000000007777778888777771711717117171171279999999999979738888878887888884aaa77aaaaa7aa77577227222227227767000003888808b700000000
0000000007777778887777771777717117171171279977999999799738888888888888884aa77aaaaa7aaa77572222202022777767bbbbbb38888bb700000000
0000000007777788887777771111111111111111277999779999997738888888888888884777aaaa77aa77775722222200227777677b000030883b7700000000
00000000077777888887777717777777777777712777779111977777378887888887888747aaaaa7aaa7777757722272272277776777b0000333b77700000000
00000000077777888887777711111111111111112777777999777777377777788877777747aaa77aaa7777775777777222777777677777bbbbbb777700000000
00000000077777777777777711111111111111112777777777777777377777777777777747777777777777775777777777777777677777777777777700000000
00000000cccccccccccccccc66666666666666665555555555555555000000000000000000000000000000000000000000000000000000000000000000000000
00000000cccccc6666cccccc66666666666666665555558855555555000000000000000000000000000000000000000000000000000000000000000000000000
00000000ccccc66666cccccc66666999966666665555888888555555000000000000000000000000000000000000000000000000000000000000000000000000
00000000ccccc66666cccccc66669999966666665558888888855555000000000000000000000000000000000000000000000000000000000000000000000000
00000000ccc6666666cccccc66699969996666665558885588855555000000000000000000000000000000000000000000000000000000000000000000000000
00000000ccc666c666cccccc66699666999666665555555558855555000000000000000000000000000000000000000000000000000000000000000000000000
00000000ccccccc666cccccc66699666699666665555555888855555000000000000000000000000000000000000000000000000000000000000000000000000
00000000ccccccc666cccccc66666666699666665555558888555555000000000000000000000000000000000000000000000000000000000000000000000000
00000000ccccccc666cccccc66666666699666665555558888885555000000000000000000000000000000000000000000000000000000000000000000000000
00000000ccccccc666cccccc66666666999666665555555588888555000000000000000000000000000000000000000000000000000000000000000000000000
00000000ccccccc666cccccc66666669996666665555555555888855000000000000000000000000000000000000000000000000000000000000000000000000
00000000ccccccc666cccccc66669999996666665555885555588855000000000000000000000000000000000000000000000000000000000000000000000000
00000000ccccccc6666ccccc66699999999999665555888555558855000000000000000000000000000000000000000000000000000000000000000000000000
00000000ccccc6666666cccc66699999999999965555888855588855000000000000000000000000000000000000000000000000000000000000000000000000
00000000ccccc6666666cccc66666666666669965555588888888855000000000000000000000000000000000000000000000000000000000000000000000000
00000000cccccccccccccccc66666666666666665555555888885555000000000000000000000000000000000000000000000000000000000000000000000000
33333333333333333333333300000000000000000000000000007777777777777777777777777777777777777777777777777777777770000000000000000000
33333333333333333333333300000011110000000000000000077777777777777777777777777777777777777777777788877777777777000000000000000000
33333333333333333333333300001188881100000000000000777777777777777777777777777788777778888887777788887777777888700000000000000000
33333333333333333333333300018888888810000000000000777777777777777777777777788887777778888887777788888777888888770000000000000000
33330000000000000000333300188888887781000000000007777777787777777777777888888887777778888888777788888777888888870000000000000000
33330000000000000000333300188888887781000000000078777777788877777777777788888887777778888888777778888777888888870000000000000000
33330000000000000000333301888888888888100000000078887777788887777777777788888777777778888888877778888777888888870000000000000000
33330000000000000000333301888888888888100000000088887777788888777778887788788877777778888888887778888777888888870000000000000000
33330000333333330000333301888888888888100000000088887777788888777788887777788877777778888888887778888777888888770000000000000000
33330000333333330000333301888888888888100000000088888777788888777888887777788877777777888888888778888777888888770000000000000000
33330000333333330000333300188888888881000000000088888777888888777888877777788877777777888888888878888777888888770000000000000000
33330000333333330000333300188888888881000000000088888777888888878888777777788887777777888888888888888777888888770000000000000000
33330000333333330000333300018888888810000000000088888877888888878888777777788887777777888888888888888777888888770000000000000000
33330000333333330000333300001188881100000000000078888878888888888887777777788887777777888888788888888777888888770000000000000000
33330000333333330000333300000011110000000000000078888888888888888887777777778887777777888887788888888877888888770000000000000000
33330000333333330000333300000000000000000000000078888888888888888887777777778887777777788887778888888877888888770000000000000000
33330000000000000000333300000000000000000000000077888888887778888877777777778887777777788887778888888877888888770000000000000000
33330000000000000000333300000000000000000000000077788888887778888877777777778888777777788887777888888777888887770000000000000000
33330000000000000000333300000000000000000000000077788888887778888777777777778888777777788887777888888777888887770000000000000000
33333333333333333333333300000000000000000000000077778888877778888777777777777888777777788887777788888777888877770000000000000000
33333333333333333333333300000000000000000000000077778888877778888777777777777888777777788887777778888777888877770000000000000000
33333333333333333333333300000000000000000000000077777888877777888777777777777888777777788887777778888777888777770000000000000000
33333333333333333333333300000000000000000000000077777877777777887777777777777888777887778887777777888777888777770000000000000000
33333333333333333333333300000000000000000000000077777777777777777777777777777888888887778887777777788777777777770000000000000000
88888888111111110000000000000000000000000000000077777777777777777777777778888888888887778887777777777777777777770000000000000000
88888888111111110000000000000000000000000000000077777777777777777777777778888887888877778877777777777777777777770000000000000000
88888888111111110000000000000000000000000000000077777777777777777777777777887777777777778877777777777777888877770000000000000000
88888888111111110000000000000000000000000000000077777777777777777777777777777777777777777777777777777777888877770000000000000000
88888888111111110000000000000000000000000000000077777777777777777777777777777777777777777777777777777777888888700000000000000000
88888888111111110000000000000000000000000000000007777777777777777777777777777777777777777777777777777777888888700000000000000000
88888888111111110000000000000000000000000000000000777777777777777777777777777777777777777777777777777777888888000000000000000000
88888888111111110000000000000000000000000000000000007777777777777777777777777777777777777777777777777777888877000000000000000000
00000777777777777777777777777777777777777777777777000077777777777777777777777777777777777777777777777777777770000000000000000000
00007777777777777777777777777777777777777777777777770000777777777777777777777777777777777777777777777000000000000000000000000000
00077777777777777777777777777777777777777777777777777777000000777777777777777777777777777777777000000000000000000000000000000000
00777777777777777777777777777777777777777777777777777777770000000077000000000000000000000000000000000000000000000000000000000000
07777777777777777777777777777777777777777777777777777777770000000000000000000000000000000000000000000000000000000000000000000000
77777777777777777777777777777777777777777777777777777777777777000000000000000000000000000000000000000000000000000000000000000000
77777777777777777777777777777777777777777777777777777777777777770000000000000000000000000000000000000000000000000000000000000000
77771117777777777777777777777777777777777777777777777777777777770000000000000000000000000000000000000000000000000000000000000000
77711117777777777777111117777777111111177711111111777777777777770000000000000000000000000000000000000000000000000000000000000000
77711117777777777771111111777771111111177711111111777777777777770000000000000000000000000000000000000000000000000000000000000000
77711177777777777771111111777711111111177711111111777777777777770000000000000000000000000000000000000000000000000000000000000000
77711177777777777771111111177711117777777711177777777777777777770000000000000000000000000000000000000000000000000000000000000000
77711177777777777711117111177711117777777711177777777777777777770000000000000000000000000000000000000000000000000000000000000000
77111177777777777711117711177711111777777111111177777777777777770000000000000000000000000000000000000000000000000000000000000000
77111177777777777111177711177771111177777111111111177777777777770000000000000000000000000000000000000000000000000000000000000000
77111177777777777111177711177771111111777111111111177777777777770000000000000000000000000000000000000000000000000000000000000000
77111177777777777111177711177777111111177711171111177777777777770000000000000000000000000000000000000000000000000000000000000000
77111177777777777111177711177777771111177711177711177777777777770000000000000000000000000000000000000000000000000000000000000000
77111177777777777111117111177777777111177711177777777777777777770000000000000000000000000000000000000000000000000000000000000000
77111117777777777711111111177777771111177711177777777777777777770000000000000000000000000000000000000000000000000000000000000000
77111117777777777771111111177777711111177711177777777777777777770000000000000000000000000000000000000000000000000000000000000000
77111111777111177777111117777711111111777711117711177711177777770000000000000000000000000000000000000000000000000000000000000000
77711111111111177777777777777711111117777711111111177711117711170000000000000000000000000000000000000000000000000000000000000000
77777111111111177777777777777711111177777771111111177711117711170000000000000000000000000000000000000000000000000000000000000000
77777711111111177777777777777777777777777771111111777711117711170000000000000000000000000000000000000000000000000000000000000000
77777777777777777777777777777777777777777771111777777777777777770000000000000000000000000000000000000000000000000000000000000000
07777777777777777777777777777777777777777777777777777777777777770000000000000000000000000000000000000000000000000000000000000000
00777777777777777777777777777777777777777777777777777777777777770000000000000000000000000000000000000000000000000000000000000000
00077777777777777777777777777777777777777777777777777777777777700000000000000000000000000000000000000000000000000000000000000000
00077777777777777777777777777777777777777777777777777777777777000000000000000000000000000000000000000000000000000000000000000000
00007777777777777777777777777777777777777777777777777777777770000000000000000000000000000000000000000000000000000000000000000000
00000777777777777777777777777777777777777777777777777777777700000000000000000000000000000000000000000000000000000000000000000000
00000777777777777777777777777777777777777777777777777777777000000000000000000000000000000000000000000000000000000000000000000000
00000000777777777777777777777777777777777777777777777777770000000000000000000000000000000000000000000000000000000000000000000000
00000000000777777777777777777777777777777777777777777777700000000000000000000000000000000000000000000000000000000000000000000000
00000000000000077777777777777777777777777777777000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0001010202040408081010202040400000010102020404080810102020404000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000515151515151515151515151000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000515151515151515151515151000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000252650000000000000522526000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000353650000000000000523536000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000232450000000000000522324000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000333450000000000000523334000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000212250000000000000522122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000313250000000000000523132000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000232450000000000000522324000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000333450000000000000523334000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000252650000000000000522526000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000353650000000000000523536000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000515151515151515151515151000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000717171717171717171717171000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000717171717171717171717171000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000717171717171717171717171000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000717171717171717171717171000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
