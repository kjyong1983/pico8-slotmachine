pico-8 cartridge // http://www.pico-8.com
version 29
__lua__
--main

function _init()

 slots = {
		s1 = slot:new(38,1),
		s2 = slot:new(56,1),
		s3 = slot:new(74,1)
	}
	
 game:init()
 bg:init()
 lever:init()
 money:init()
 
 debug:init()
end

function _update()

	game:update()
	
 lever:update()
 for k,v in pairs(slots) do
  v:update()
 end
 
 money:update()
 
 debug:update()
end


function _draw()
 cls(14)
  
 for k,v in pairs(slots) do
  v:draw()
 end
 
 bg:draw()
 lever:draw()
 money:draw()
 
 debug:draw()
end
-->8
--slot

ystart = -112
yend = 112-1

sw=30
sh=30

symbolnum=7
inertia=true

slot = {}
slot.__index = slot
function slot:new(_x, _spridx)
 local self =  {}

 self.x = _x
 self.y = ystart
 
 self.x2 = _x
 self.y2 = ystart+16*symbolnum

 self.ddy = 0.3
	self.dy = 0
	self.maxdy = 10
 self.spridx = _spridx 
 self.isrolling = false
 -- iswaitingforresult
 self.iswaiting = false
 
 self.gotresult=false
 
 setmetatable(self, slot)
 return self
end

function slot:start()
 self.isrolling = true
 self.gotresult=false
end

function slot:stop()
 self.isrolling = false
 self.iswaiting = true
 
 y1dsc=flrex(self.y,16)
end

function slot:update()

	if self.isrolling == false then

  if inertia then
	  self.dy -= self.ddy
		 if self.dy < 0 then
		  self.dy = 0
		 end
  else
   self.dy = 0 
  end
	 
	else

  if inertia then
		 self.dy += self.ddy
		 if self.dy > self.maxdy then
		  self.dy = self.maxdy
		 end  
  else
   self.dy = self.maxdy
  end
	
	end

 self.y = self.y + self.dy
 self.y2 = self.y2 + self.dy

	if not self.isrolling and
	       self.iswaiting then
	 -- align slot
  if self.y~=y1dsc then
	  self.y = flr(self.y + 1)
	  self.y2 = flr(self.y2 + 1)
	 else
 	 printh('result: '..self.y)
	  self.iswaiting=false
	  self.getresult()
	 end
	 
	end
	
 if	self.y > yend then
	 self.y = ystart
 end
 
 if	self.y2 > yend then
	 self.y2 = ystart
 end
 
 -- interpolation
 if	self.y > self.y2 then
  self.y2 = self.y - 112
 else
  self.y2 = self.y + 112
 end
 
end

function slot:draw()

	for i=0,6 do
	 spr(self.spridx+i*2,
	     self.x,self.y+16*i,
	     2,2)

	 spr(self.spridx+i*2,
	     self.x2,self.y2+16*i,
	     2,2)
	end

end

function slot:getresult()
 if self.gotresult then
  return
 end

 self.gotresult=true
 
 -- get 3 points, get flag
 checkx=self.x+6
 
 checky={}
 for i=0,4 do
  checky[i+1]=20+i*16
 end
 
-- checky1=20
-- checky2=60
-- checky3=90
-- checky4=90
-- checky5=90
 
 r1=fget(self.x, checky[1])
 r2=fget(self.x, checky[2])
 r3=fget(self.x, checky[3])
 r4=fget(self.x, checky[4])
 r5=fget(self.x, checky[5])
 
 printh('r1: '..r1)
 printh('r2: '..r2)
 printh('r3: '..r3)
 printh('r4: '..r4)
 printh('r5: '..r5)
 
end
-->8
--game

game = {}
started = false
phase = 'end'
pressed = false

function game:init()
 
end

function game:update()

-- printh('game update phase: '..game.phase..' '..time())

 if not btn(4) then
  pressed = false
--  printh('not btn4')
 end

 if btn(4) then
--  printh('btn4 1')  
  if pressed == true then
   return
  end
  
--  printh('btn4 2')
  pressed = true
  
  if not started then
   printh('game start')
	  started = true
	  phase = '1'
	  for k,v in pairs(slots) do
				v:start()
	  end

  elseif phase == '1' then
   printh('game 1')
	  slots.s1:stop()
	  phase = '2'
	 elseif phase == '2' then
   printh('game 2')
	  slots.s2:stop()
	  phase = '3'
	 
	 elseif phase == '3' then
   printh('game 3')
	  slots.s3:stop()
	  phase = 'end'
	  started = false
	 end	 
	 

	 
	
	 
 end 

end
-->8
--test

test={}
test.posx=0
test.posy=0
test.offsetx=20
function test.draw()
--sx, sy = (sp % 16) * 8, (sp \ 16) * 8


-- draw the 8 x 8 image from (8, 0) at screen location (60, 60)
--sspr(8, 0, 8, 8, 60, 60)

-- draw the same image but stretched to 12 x 20 at screen location (44, 48)
--sspr(8, 0, 8, 8, 44, 48, 12, 20)

-- draw it again, flipped horizontally, at (72, 48)
--sspr(8, 0, 8, 8, 72, 48, 12, 20, true, false)
 cls(1)

	for i=1,3 do
		sspr(-8+16*i, 0, 16, 16,
	      test.posx+test.offsetx,
	      test.posy+-30+30*i,
	      30, 30)
	end

	for i=1,3 do
		sspr(-8+16*i, 0, 16, 16,
	      test.posx+test.offsetx+30,
	      test.posy+-30+30*i,
	      30, 30)
	end

	for i=1,3 do
		sspr(-8+16*i, 0, 16, 16,
	      test.posx+test.offsetx+60,
	      test.posy+-30+30*i,
	      30, 30)
	end

end
-->8
--bg

bg={}
function bg:init()

end

function bg:update()

end

function bg:draw()
 map()
end
-->8
--debug

debug={}
function debug:init()
 printh("----------")
 printh("debug:init")
 printh("----------")
-- testmod()
end

function debug:update()
-- adjustslot()

end

function adjustslot()
 if btnp(0) then
  slots.s1.y -= 1
 end
 
 if btnp(1) then
  slots.s1.y += 1 
 end

 if btnp(2) then
  slots.s2.y -= 1
 end
 
 if btnp(3) then
  slots.s2.y += 1 
 end
end

function debug:draw()
-- testslot()
testslotpos()
  
end

function testslotpos()
	x1=44
	y1=20
 cursor(x1, y1)
 print('0',x1,y1,0)

	x1=44
	y1=36		
 cursor(x1, y1)
 print('1',x1,y1,0)

	x1=44
	y1=52		
 cursor(x1, y1)
 print('2',x1,y1,0)  

	x1=44
	y1=68		
 cursor(x1, y1)
 print('3',x1,y1,0)

	x1=44
	y1=84		
 cursor(x1, y1)
 print('4',x1,y1,0)
end

function testslot()
 s1y=slots.s1.y
 s1y2=slots.s1.y2
 
 d1=s1y2-s1y
 
 s2y=slots.s2.y
 s2y2=slots.s2.y2

 d2=s2y2-s2y
 
 s3y=slots.s3.y
 s3y2=slots.s3.y2

 d3=s3y2-s3y

	print("s1y : "..s1y, 0, 0)
	print("s1y2: "..s1y2, 0, 10)
	
	print("d1: "..d1, 0, 20)
	
	print("s2y : "..s2y, 0, 30)
	print("s2y2: "..s2y2, 0, 40)

	print("d2: "..d2, 0, 50)
	
	print("s3y : "..s3y, 0, 60)
	print("s3y2: "..s3y2, 0, 70)

	print("d3: "..d3, 0, 80)

 print("flr s1y: "..flr(s1y), 
 0, 90, 0)
 
 mod=flr(s1y) % 16
 print("mod: "..mod,
 0,95,0)
 
 is16= (mod~=0)
 print(is16,
 0,100,0)
end

function testmod()
	for i=0,128,0.1 do
	 mod = flr(i%16)
--	 mod = i%16
	 is16=mod==0

  if is16 then
	 result=i.." is "..tostring(is16)
	 printh(result)
  end

	end

end
-->8
--lever

lever={}

function lever:init()
 lever.y=15
 lever.top=15
 lever.bottom=80
end

function lever:update()
 if btn(4) and 
    phase=='1' then
  lever.y = lever.bottom
 else
  lever.y = lever.top
 end
end

function lever:draw()
 rectfill
  (112+6, lever.bottom+8,
   112+9, lever.y+8, 6)
 rectfill
  (112, lever.bottom,
   112+5, lever.bottom+16,10)
 spr(67,112,lever.y,2,2)
end
-->8
-- converts anything to string, even nested tables
function tostring(any)
    if type(any)=="function" then 
        return "function" 
    end
    if any==nil then 
        return "nil" 
    end
    if type(any)=="string" then
        return any
    end
    if type(any)=="boolean" then
        if any then return "true" end
        return "false"
    end
    if type(any)=="table" then
        local str = "{ "
        for k,v in pairs(any) do
            str=str..tostring(k).."->"..tostring(v).." "
        end
        return str.."}"
    end
    if type(any)=="number" then
        return ""..any
    end
    return "unkown" -- should never show
end
-->8
--utility

-- flr with num
function flrex(num,div)
	local q = num / div
	q = flr(q)
	printh("q: "..q)
	printh("div*q: "..div*q)
	return div*q
end
-->8
--money

money={}
function money:init()
 money.value=100
 money.mul=1
 money.maxmul=10
 --current game
 money.bet=5
end

function money:update()
 if phase~='end' then
  return
 end

 -- up and down
 if btnp(2) then
  money.mul=money.mul+1
  if self.mul>self.maxmul then
   money.mul=money.maxmul
  end
 end
 
 if btnp(3) then
  money.mul=money.mul-1
		if money.mul<1 then
		 money.mul=1
		end
 end
 
end

function money:draw()
 print("money: "..money.value, 40, 100)
 print("bet: "..money.bet*money.mul, 40, 110)
end
__gfx__
00000000377777777777777211111111111111117777777777777772777777777777777777777777777777777777777777777777777777777777777700000000
000000007788888888887772111111111111111177777799977777727777777777777777777777aaaaaaa7777777777bb7777777777777777777777700000000
007007007888888888888772177777777777777177777999997777727777777b77777777777777777aa7777777772277bbb77777777777bbbbbb777700000000
00077000788887777888877211111111111111117777799999777772777777bbb777777777777777aaaa7777777272277bbb777777777000003bb77700000000
0007700077888777788887721777717777177711777777999777777277777b7b7b777777777777aaaaaaa77777722027b77bb7777777bbbbb3883b7700000000
007007007788877788887772171171711717117177779999999777727777b77b77b7777777777aaa7aa7aa7777772272227777777770b00038888bb700000000
00000000778887778887777217117171171711717779999999997772777b777b777b77777777aaaa7aa7aa77777222222227227777000000380888b700000000
0000000077777778888777721777117117177711777999999999777277b7777b7777b777777aaaa77aaa7aa7772222202202227777bbbbb3888880b700000000
000000007777777888777772171171777717117177999999999797727888777b77788877777aaaa7aaaa7aa7772270220222020777bbbb03888888b700000000
00000000777777888877777217117171171711717999999999997972888887888788888777aaa77aaaaa7aa7777202272270220777000003880888b700000000
0000000077777788877777721711717117171171799779999997997288888888888888877aaa77aaaaa7aa77777227222227227777000003888808b700000000
0000000077777888877777721777717117171171779997799999977288888888888888877aa77aaaaa7aaa77772222202022777777bbbbbb38888bb700000000
0000000077777888887777721111111111111111777779111977777278887888887888777777aaaa77aa77777722222200227777777b000030883b7700000000
00000000777778888877777217777777777777717777779997777772777777888777777777aaaaa7aaa7777777722272272277777777b0000333b77700000000
00000000777777777777777211111111111111117777777777777772777777777777777777aaa77aaa7777777777777222777777777777bbbbbb777700000000
00000000222222222222222711111111111111112222222222222227222222222222222722222222222222278888888888888887ccccccccccccccc800000000
00000000cccccccccccccccc66666666666666665555555555555555000000000000000000000000000000000000000000000000000000000000000000000000
00000000cccccc6666cccccc66666666666666665555558855555555000000000000000000000000000000000000000000000000000000000000000000000000
00000000ccccc66666cccccc66666999966666665555888888555555000000000000000000000000000000000000000000000000000000000000000000000000
00000000ccccc66666cccccc66669999966666665558888888855555000000000000000000000000000000000000000000000000000000000000000000000000
00000000ccc6666666cccccc66699969996666665558885588855555000000000000000000000000000000000000000000000000000000000000000000000000
00000000ccc666c666cccccc66699666999666665555555558855555000000000000000000000000000000000000000000000000000000000000000000000000
00000000ccccccc666cccccc66699666699666665555555888855555000000000000000000000000000000000000000000000000000000000000000000000000
00000000ccccccc666cccccc66666666699666665555558888555555000000000000000000000000000000000000000000000000000000000000000000000000
00000000ccccccc666cccccc66666666699666665555558888885555000000000000000000000000000000000000000000000000000000000000000000000000
00000000ccccccc666cccccc66666666999666665555555588888555000000000000000000000000000000000000000000000000000000000000000000000000
00000000ccccccc666cccccc66666669996666665555555555888855000000000000000000000000000000000000000000000000000000000000000000000000
00000000ccccccc666cccccc66669999996666665555885555588855000000000000000000000000000000000000000000000000000000000000000000000000
00000000ccccccc6666ccccc66699999999999665555888555558855000000000000000000000000000000000000000000000000000000000000000000000000
00000000ccccc6666666cccc66699999999999965555888855588855000000000000000000000000000000000000000000000000000000000000000000000000
00000000ccccc6666666cccc66666666666669965555588888888855000000000000000000000000000000000000000000000000000000000000000000000000
00000000cccccccccccccccc66666666666666665555555888885555000000000000000000000000000000000000000000000000000000000000000000000000
33333333333333333333333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33333333333333333333333300000011110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33333333333333333333333300001188881100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33333333333333333333333300018888888810000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33330000000000000000333300188888887781000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33330000000000000000333300188888887781000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33330000000000000000333301888888888888100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33330000000000000000333301888888888888100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33330000333333330000333301888888888888100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33330000333333330000333301888888888888100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33330000333333330000333300188888888881000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33330000333333330000333300188888888881000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33330000333333330000333300018888888810000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33330000333333330000333300001188881100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33330000333333330000333300000011110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33330000333333330000333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33330000000000000000333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33330000000000000000333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33330000000000000000333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33333333333333333333333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33333333333333333333333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33333333333333333333333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33333333333333333333333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33333333333333333333333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
88888888111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
88888888111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
88888888111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
88888888111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
88888888111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
88888888111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
88888888111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
88888888111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0001010202040408081010202040400000010102020404080810102020404000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000515151515151515151515151000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000515151515151515151515151000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000252650000000000000522526000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000353650000000000000523536000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000232450000000000000522324000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000333450000000000000523334000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000212250000000000000522122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000313250000000000000523132000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000232450000000000000522324000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000333450000000000000523334000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000252650000000000000522526000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000353650000000000000523536000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000515151515151515151515151000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000717171717171717171717171000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000717171717171717171717171000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000717171717171717171717171000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000717171717171717171717171000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
